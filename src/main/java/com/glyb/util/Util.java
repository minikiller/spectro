package com.glyb.util;

public class Util {
    /**
     * 对输入序列Sign_in()进行一维离散小波分解，输出分解序列
     *
     * @param sign_in
     * @param wname
     * @param DIME
     * @param c
     * @param l
     */
    public static void My_Dwt2(double[] sign_in, String wname, Integer DIME, double[] c, long[] l) {
        double[] ca;
        double[] lp_d = new double[]{}, hp_d = new double[]{}, lp_r = new double[]{}, hp_r = new double[]{};
        double[] lp_d_dbl, hp_d_dbl, lp_r_dbl, hp_r_dbl;
        double[] conv_out = new double[]{}, sign_out = new double[]{}, mextend_out = new double[]{};
        double[] Downspl_out = new double[]{}, Mtrim_out = new double[]{};

        int M = sign_in.length;
        ca = new double[M];
        long[] L = new long[DIME * 2 + 1];
        double[] C = new double[0];
        Util.CopyArrDbl2(ca, sign_in, 1L, Long.valueOf(M) * 8);//  '首先复制数组

        My_Getfilters(wname, lp_d, hp_d, lp_r, hp_r);                            // '提取四种滤波器
        int length_filter = lp_d.length;
        lp_d_dbl = new double[length_filter];
        hp_d_dbl = new double[length_filter];
        lp_r_dbl = new double[length_filter];
        hp_r_dbl = new double[length_filter];

        for (int i = 1; i < lp_d.length; i++) {
            lp_d_dbl[i] = lp_d[i];                   // '将四种滤波器变成double型
            hp_d_dbl[i] = hp_d[i];
            lp_r_dbl[i] = lp_r[i];
            hp_r_dbl[i] = hp_r[i];
        }
        for (int kkk = 1; kkk < DIME; kkk++) {
            int length_ca = ca.length;
            My_Mextend(ca, length_filter - 2, mextend_out);                    //     '数据延拓 '经比对与matlab一致@*******

            if (mextend_out.length >= 1024) {
                My_Conv(mextend_out, lp_d_dbl, conv_out); //  '低通卷积
            } else {
                My_Conv(mextend_out, lp_d_dbl, conv_out); //  '低通卷积
            }


            My_Downspl(conv_out, Downspl_out);
            //' Debug.Print "下采样时间=    "; Timer() - ttt '下采样
            My_Mtrim(Downspl_out, (length_filter - 2) / 2, Mtrim_out);      //   '数据裁剪

            length_dnl = Long.valueOf(Mtrim_out.length);
            L[(kkk - 1) * 2 + 2] = length_dnl;//'近似系数长度付给返回数组
            double[] dnl = new double[length_dnl.intValue()];
            ca = new double[length_dnl.intValue()];
            int length_c = C.length;
            // ReDim Preserve C(length_c + 2 * length_dnl) As Double;
            C = preserve(C, length_c + 2 * length_dnl.intValue());
            CopyArr(dnl, Mtrim_out, length_dnl * 8, 1L, 1L);
            CopyArr(ca, dnl, length_dnl * 8, 1L, 1L);
            CopyArr(C, dnl, length_dnl * 8, Long.valueOf(length_c) + 1, 1L);

            if (mextend_out.length >= 1024) {
                My_Conv(mextend_out, hp_d_dbl, conv_out);//'高通卷积
            } else {
                My_Conv(mextend_out, hp_d_dbl, conv_out);//'高通卷积
            }
            My_Downspl(conv_out, Downspl_out);//'通过下抽样求出细节部分的分解系数
            My_Mtrim(Downspl_out, (length_filter - 2) / 2, Mtrim_out);//'数据裁剪

            length_dnh = Long.valueOf(Mtrim_out.length);
            L[(kkk - 1) * 2 + 3] = length_dnh;//'细节系数长度付给返回数组
            double[] dnh = new double[length_dnh.intValue()];

            CopyArr(dnh, Mtrim_out, length_dnh * 8, 1L, 1L);

            CopyArr(C, dnh, length_dnh * 8, length_c + length_dnh + 1, 1L);
        }


    }

    /**
     * 'My_Getfilters 数组下标以1开始
     *
     * @param wname 获得高低通分解系数及高低通重建系数。
     * @param lp_d  低通分解系数；
     * @param hp_d  高通分解系数；
     * @param lp_r  低通重建系数；
     * @param hp_r  高通重建系数；
     */

    public static void My_Getfilters(String wname, double[] lp_d, double[] hp_d, double[] lp_r, double[] hp_r) {
        if (wname.equals("harr")) {
            lp_d = new double[]{0, 0.707106781186548, 0.707106781186548};
            hp_d = new double[]{0, -0.707106781186548, 0.707106781186548};
            lp_r = new double[]{0, 0.707106781186548, 0.707106781186548};
            hp_r = new double[]{0, 0.707106781186548, -0.707106781186548};
        } else if (wname.equals("db1")) {
            lp_d = new double[]{0, 0.707106781186548, 0.707106781186548};
            hp_d = new double[]{0, -0.707106781186548, 0.707106781186548};
            lp_r = new double[]{0, 0.707106781186548, 0.707106781186548};
            hp_r = new double[]{0, 0.707106781186548, -0.707106781186548};

        } else if (wname.equals("db2")) {
            lp_d = new double[]{0, -0.129409522550921, 0.224143868041857, 0.836516303737469, 0.48296291314469};
            hp_d = new double[]{0, -0.48296291314469, 0.836516303737469, -0.224143868041857, -0.129409522550921};
            lp_r = new double[]{0, 0.48296291314469, 0.836516303737469, 0.224143868041857, -0.129409522550921};
            hp_r = new double[]{0, -0.129409522550921, -0.224143868041857, 0.836516303737469, -0.48296291314469};
        } else if (wname.equals("db3")) {
            lp_d = new double[]{0, 0.035226291882101, -0.085441273882241, -0.135011020010391, 0.459877502119331, 0.806891509313339, 0.332670552950957};
            hp_d = new double[]{0, -0.332670552950957, 0.806891509313339, -0.459877502119331, -0.135011020010391, 0.085441273882241, 0.035226291882101};
            lp_r = new double[]{0, 0.332670552950957, 0.806891509313339, 0.459877502119331, -0.135011020010391, -0.085441273882241, 0.035226291882101};
            hp_r = new double[]{0, 0.035226291882101, 0.085441273882241, -0.135011020010391, -0.459877502119331, 0.806891509313339, -0.332670552950957};

        } else if (wname.equals("db4")) {
            lp_d = new double[]{0, -0.010597401784997, 0.032883011666983, 0.030841381835987, -0.187034811718881, -0.027983769416984, 0.63088076792959, 0.714846570552542, 0.230377813308855};
            hp_d = new double[]{0, -0.230377813308855, 0.714846570552542, -0.63088076792959, -0.027983769416984, 0.187034811718881, 0.030841381835987, -0.032883011666983, -0.010597401784997};
            lp_r = new double[]{0, 0.230377813308855, 0.714846570552542, 0.63088076792959, -0.027983769416984, -0.187034811718881, 0.03084138183598, 0.032883011666983, -0.010597401784997};
            hp_r = new double[]{0, -0.010597401784997, -0.032883011666983, 0.030841381835987, 0.187034811718881, -0.027983769416984, -0.63088076792959, 0.714846570552542, -0.230377813308855};

        } else if (wname.equals("db5")) {
            lp_d = new double[]{0, 0.003335725285002, -0.012580751999016, -0.006241490213012, 0.077571493840065, -0.03224486958503, -0.24229488706619, 0.138428145901103, 0.724308528438574, 0.603829269797473, 0.160102397974125};
            hp_d = new double[]{0, -0.160102397974125, 0.603829269797473, -0.724308528438574, 0.138428145901103, 0.24229488706619, -0.03224486958503, -0.077571493840065, -0.006241490213012, 0.012580751999016, 0.003335725285002};
            lp_r = new double[]{0, 0.160102397974125, 0.603829269797473, 0.724308528438574, 0.138428145901103, -0.24229488706619, -0.03224486958503, 0.077571493840065, -0.006241490213012, -0.012580751999016, 0.003335725285002};
            hp_r = new double[]{0, 0.003335725285002, 0.012580751999016, -0.006241490213012, -0.077571493840065, -0.03224486958503, 0.24229488706619, 0.138428145901103, -0.724308528438574, 0.603829269797473, -0.160102397974125};

        } else if (wname.equals("db6")) {
            lp_d = new double[]{0, -0.001077301084996, 0.004777257511011, 0.000553842200994, -0.031582039318031, 0.027522865530016, 0.097501605587079, -0.129766867567096, -0.226264693965169, 0.315250351709243, 0.751133908021578, 0.494623890398385, 0.11154074335008};
            hp_d = new double[]{0, -0.11154074335008, 0.494623890398385, -0.751133908021578, 0.315250351709243, 0.226264693965169, -0.129766867567096, -0.097501605587079, 0.027522865530016, 0.031582039318031, 0.000553842200994, -0.004777257511011, -0.001077301084996};
            lp_r = new double[]{0, 0.11154074335008, 0.494623890398385, 0.751133908021578, 0.315250351709243, -0.226264693965169, -0.129766867567096, 0.097501605587079, 0.027522865530016, -0.031582039318031, 0.000553842200994, 0.004777257511011, -0.001077301084996};
            hp_r = new double[]{0, -0.001077301084996, -0.004777257511011, 0.000553842200994, 0.031582039318031, 0.027522865530016, -0.097501605587079, -0.129766867567096, 0.226264693965169, 0.315250351709243, -0.751133908021578, 0.494623890398385, -0.11154074335008};

        } else if (wname.equals("db10")) {
            lp_d = new double[]{0, -0.000013264203002, 0.000093588670001, -0.000116466854994, -0.000685856695005, 0.001992405294991, 0.001395351746994, -0.01073317548298, 0.003606553566988, 0.033212674058933, -0.029457536821946, -0.071394147165861, 0.093057364603807, 0.127369340335743, -0.195946274376597, -0.249846424326489, 0.281172343660426, 0.688459039452592, 0.52720118893092, 0.188176800077621, 0.026670057900951};
            hp_d = new double[]{0, -0.026670057900951, 0.188176800077621, -0.52720118893092, 0.688459039452592, -0.281172343660426, -0.249846424326489, 0.195946274376597, 0.127369340335743, -0.093057364603807, -0.071394147165861, 0.029457536821946, 0.033212674058933, -0.003606553566988, -0.01073317548298, -0.001395351746994, 0.001992405294991, 0.000685856695005, -0.000116466854994, -0.000093588670001, -0.000013264203002};
            lp_r = new double[]{0, 0.026670057900951, 0.188176800077621, 0.52720118893092, 0.688459039452592, 0.281172343660426, -0.249846424326489, -0.195946274376597, 0.127369340335743, 0.093057364603807, -0.071394147165861, -0.029457536821946, 0.033212674058933, 0.003606553566988, -0.01073317548298, 0.001395351746994, 0.001992405294991, -0.000685856695005, -0.000116466854994, 0.000093588670001, -0.000013264203002};
            hp_r = new double[]{0, -0.000013264203002, -0.000093588670001, -0.000116466854994, 0.000685856695005, 0.001992405294991, -0.001395351746994, -0.01073317548298, -0.003606553566988, 0.033212674058933, 0.029457536821946, -0.071394147165861, -0.093057364603807, 0.127369340335743, 0.195946274376597, -0.249846424326489, -0.281172343660426, 0.688459039452592, -0.52720118893092, 0.188176800077621, -0.026670057900951};

        } else if (wname.equals("db11")) {
            lp_d = new double[]{0, 0.000004494274277, -0.000034634984187, 0.000054439074699, 0.000249152523553, -0.000893023250666, -0.000308592858815, 0.004928417656059, -0.003340858873014, -0.015364820906202, 0.020840904360181, 0.031335090219045, -0.06643878569503, -0.04647995511669, 0.149812012466376, 0.066043588196682, -0.27423084681795, -0.162275245027492, 0.411964368947913, 0.685686774916209, 0.449899764356051, 0.144067021150626, 0.018694297761471};
            hp_d = new double[]{0, -0.018694297761471, 0.144067021150626, -0.449899764356051, 0.685686774916209, -0.411964368947913, -0.162275245027492, 0.27423084681795, 0.066043588196682, -0.149812012466376, -0.04647995511669, 0.06643878569503, 0.031335090219045, -0.020840904360181, -0.015364820906202, 0.003340858873014, 0.004928417656059, 0.000308592858815, -0.000893023250666, -0.000249152523553, 0.000054439074699, 0.000034634984187, 0.000004494274277};
            lp_r = new double[]{0, 0.018694297761471, 0.144067021150626, 0.449899764356051, 0.685686774916209, 0.411964368947913, -0.162275245027492, -0.27423084681795, 0.066043588196682, 0.149812012466376, -0.04647995511669, -0.06643878569503, 0.031335090219045, 0.020840904360181, -0.015364820906202, -0.003340858873014, 0.004928417656059, -0.000308592858815, -0.000893023250666, 0.000249152523553, 0.000054439074699, -0.000034634984187, 0.000004494274277};
            hp_r = new double[]{0, 0.000004494274277, 0.000034634984187, 0.000054439074699, -0.000249152523553, -0.000893023250666, 0.000308592858815, 0.004928417656059, 0.003340858873014, -0.015364820906202, -0.020840904360181, 0.031335090219045, 0.06643878569503, -0.04647995511669, -0.149812012466376, 0.066043588196682, 0.27423084681795, -0.162275245027492, -0.411964368947913, 0.685686774916209, -0.449899764356051, 0.144067021150626, -0.018694297761471};

        } else if (wname.equals("db16")) {
            lp_d = new double[]{0, -0.000000021093396, 0.000000230878409, -0.000000736365679, -0.000001043571342, 0.000011336608661, -0.000013945668988, -0.000061035966214, 0.000174787245225, 0.000114241520039, -0.00094102174936, 0.00040789698085, 0.003128023381206, -0.003644279621498, -0.006990014563413, 0.013993768859829, 0.010297659640952, -0.03688839769174, -0.007588974368872, 0.075924236044263, -0.006239722752485, -0.132388305563814, 0.027340263752723, 0.211190693947118, -0.027918208133017, -0.327063310527914, -0.089751089402488, 0.440290256886362, 0.637356332083796, 0.430312722846008, 0.165064283488855, 0.034907714323674, 0.003189220925348};
            hp_d = new double[]{0, -0.003189220925348, 0.034907714323674, -0.165064283488855, 0.430312722846008, -0.637356332083796, 0.440290256886362, 0.089751089402488, -0.327063310527914, 0.027918208133017, 0.211190693947118, -0.027340263752723, -0.132388305563814, 0.006239722752485, 0.075924236044263, 0.007588974368872, -0.03688839769174, -0.010297659640952, 0.013993768859829, 0.006990014563413, -0.003644279621498, -0.003128023381206, 0.00040789698085, 0.00094102174936, 0.000114241520039, -0.000174787245225, -0.000061035966214, 0.000013945668988, 0.000011336608661, 0.000001043571342, -0.000000736365679, -0.000000230878409, -0.000000021093396};
            lp_r = new double[]{0, 0.003189220925348, 0.034907714323674, 0.165064283488855, 0.430312722846008, 0.637356332083796, 0.440290256886362, -0.089751089402488, -0.327063310527914, -0.027918208133017, 0.211190693947118, 0.027340263752723, -0.132388305563814, -0.006239722752485, 0.075924236044263, -0.007588974368872, -0.03688839769174, 0.010297659640952, 0.013993768859829, -0.006990014563413, -0.003644279621498, 0.003128023381206, 0.00040789698085, -0.00094102174936, 0.000114241520039, 0.000174787245225, -0.000061035966214, -0.000013945668988, 0.000011336608661, -0.000001043571342, -0.000000736365679, 0.000000230878409, -0.000000021093396};
            hp_r = new double[]{0, -0.000000021093396, -0.000000230878409, -0.000000736365679, 0.000001043571342, 0.000011336608661, 0.000013945668988, -0.000061035966214, -0.000174787245225, 0.000114241520039, 0.00094102174936, 0.00040789698085, -0.003128023381206, -0.003644279621498, 0.006990014563413, 0.013993768859829, -0.010297659640952, -0.03688839769174, 0.007588974368872, 0.075924236044263, 0.006239722752485, -0.132388305563814, -0.027340263752723, 0.211190693947118, 0.027918208133017, -0.327063310527914, 0.089751089402488, 0.440290256886362, -0.637356332083796, 0.430312722846008, -0.165064283488855, 0.034907714323674, -0.003189220925348};

        } else if (wname.equals("sym4")) {
            lp_d = new double[]{0, -0.075765714789273, -0.029635527645999, 0.497618667632015, 0.803738751805916, 0.297857795605277, -0.099219543576847, -0.012603967262038, 0.032223100604043};
            hp_d = new double[]{0, -0.032223100604043, -0.012603967262038, 0.099219543576847, 0.297857795605277, -0.803738751805916, 0.497618667632015, 0.029635527645999, -0.075765714789273};
            lp_r = new double[]{0, 0.032223100604043, -0.012603967262038, -0.099219543576847, 0.297857795605277, 0.803738751805916, 0.497618667632015, -0.029635527645999, -0.075765714789273};
            hp_r = new double[]{0, -0.075765714789273, 0.029635527645999, 0.497618667632015, -0.803738751805916, 0.297857795605277, 0.099219543576847, -0.012603967262038, -0.032223100604043};

        } else if (wname.equals("sym6")) {
            lp_d = new double[]{0, 0.015404109327027, 0.003490712084217, -0.117990111148191, -0.048311742585633, 0.491055941926747, 0.787641141030194, 0.337929421727622, -0.072637522786463, -0.021060292512301, 0.044724901770666, 0.001767711864243, -0.007800708325034};
            hp_d = new double[]{0, 0.007800708325034, 0.001767711864243, -0.044724901770666, -0.021060292512301, 0.072637522786463, 0.337929421727622, -0.787641141030194, 0.491055941926747, 0.048311742585633, -0.117990111148191, -0.003490712084217, 0.015404109327027};
            lp_r = new double[]{0, -0.007800708325034, 0.001767711864243, 0.044724901770666, -0.021060292512301, -0.072637522786463, 0.337929421727622, 0.787641141030194, 0.491055941926747, -0.048311742585633, -0.117990111148191, 0.003490712084217, 0.015404109327027};
            hp_r = new double[]{0, 0.015404109327027, -0.003490712084217, -0.117990111148191, 0.048311742585633, 0.491055941926747, -0.787641141030194, 0.337929421727622, 0.072637522786463, -0.021060292512301, -0.044724901770666, 0.001767711864243, 0.007800708325034};

        } else if (wname.equals("sym8")) {
            lp_d = new double[]{0, -0.003382415951006, -0.000542132331791, 0.031695087811493, 0.007607487324918, -0.14329423835081, -0.061273359067659, 0.481359651258372, 0.777185751700524, 0.364441894835331, -0.051945838107709, -0.027219029917056, 0.049137179673608, 0.003808752013891, -0.014952258337048, -0.000302920514721, 0.001889950332759};
            hp_d = new double[]{0, -0.001889950332759, -0.000302920514721, 0.014952258337048, 0.003808752013891, -0.049137179673608, -0.027219029917056, 0.051945838107709, 0.364441894835331, -0.777185751700524, 0.481359651258372, 0.061273359067659, -0.14329423835081, -0.007607487324918, 0.031695087811493, 0.000542132331791, -0.003382415951006};
            lp_r = new double[]{0, 0.001889950332759, -0.000302920514721, -0.014952258337048, 0.003808752013891, 0.049137179673608, -0.027219029917056, -0.051945838107709, 0.364441894835331, 0.777185751700524, 0.481359651258372, -0.061273359067659, -0.14329423835081, 0.007607487324918, 0.031695087811493, -0.000542132331791, -0.003382415951006};
            hp_r = new double[]{0, -0.003382415951006, 0.000542132331791, 0.031695087811493, -0.007607487324918, -0.14329423835081, 0.061273359067659, 0.481359651258372, -0.777185751700524, 0.364441894835331, 0.051945838107709, -0.027219029917056, -0.049137179673608, 0.003808752013891, 0.014952258337048, -0.000302920514721, -0.001889950332759};

        } else if (wname.equals("sym10")) {
            lp_d = new double[]{0, 0.000770159809114, 0.000095632670723, -0.008641299277022, -0.001465382581305, 0.045927239231091, 0.011609893903712, -0.159494278884909, -0.07088053578323, 0.471690666938443, 0.769510037021096, 0.383826761067075, -0.035536740473819, -0.031990056882428, 0.049994972077375, 0.005764912033581, -0.020354939812311, -0.000804358932016, 0.004593173585312, 0.000057036083618, -0.000459329421005};
            hp_d = new double[]{0, 0.000459329421005, 0.000057036083618, -0.004593173585312, -0.000804358932016, 0.020354939812311, 0.005764912033581, -0.049994972077375, -0.031990056882428, 0.035536740473819, 0.383826761067075, -0.769510037021096, 0.471690666938443, 0.07088053578323, -0.159494278884909, -0.011609893903712, 0.045927239231091, 0.001465382581305, -0.008641299277022, -0.000095632670723, 0.000770159809114};
            lp_r = new double[]{0, -0.000459329421005, 0.000057036083618, 0.004593173585312, -0.000804358932016, -0.020354939812311, 0.005764912033581, 0.049994972077375, -0.031990056882428, -0.035536740473819, 0.383826761067075, 0.769510037021096, 0.471690666938443, -0.07088053578323, -0.159494278884909, 0.011609893903712, 0.045927239231091, -0.001465382581305, -0.008641299277022, 0.000095632670723, 0.000770159809114};
            hp_r = new double[]{0, 0.000770159809114, -0.000095632670723, -0.008641299277022, 0.001465382581305, 0.045927239231091, -0.011609893903712, -0.159494278884909, 0.07088053578323, 0.471690666938443, -0.769510037021096, 0.383826761067075, 0.035536740473819, -0.031990056882428, -0.049994972077375, 0.005764912033581, 0.020354939812311, -0.000804358932016, -0.004593173585312, 0.000057036083618, 0.000459329421005};

        } else if (wname.equals("sym11")) {
            lp_d = new double[]{0, 0.000171721950699, -0.000038795655736, -0.001734366267298, 0.000588352735397, 0.006512495674771, -0.009857934828789, -0.024080841595863, 0.037037415978858, 0.069976799610733, -0.022832651022559, 0.097198394458907, 0.572022978010068, 0.73034354908838, 0.237689909049258, -0.204654794495781, -0.144602343705308, 0.035266759564465, 0.043000190681551, -0.002003471900109, -0.006389603666454, 0.000110535097643, 0.000489263610262};
            hp_d = new double[]{0, -0.000489263610262, 0.000110535097643, 0.006389603666454, -0.002003471900109, -0.043000190681551, 0.035266759564465, 0.144602343705308, -0.204654794495781, -0.237689909049258, 0.73034354908838, -0.572022978010068, 0.097198394458907, 0.022832651022559, 0.069976799610733, -0.037037415978858, -0.024080841595863, 0.009857934828789, 0.006512495674771, -0.000588352735397, -0.001734366267298, 0.000038795655736, 0.000171721950699};
            lp_r = new double[]{0, 0.000489263610262, 0.000110535097643, -0.006389603666454, -0.002003471900109, 0.043000190681551, 0.035266759564465, -0.144602343705308, -0.204654794495781, 0.237689909049258, 0.73034354908838, 0.572022978010068, 0.097198394458907, -0.022832651022559, 0.069976799610733, 0.037037415978858, -0.024080841595863, -0.009857934828789, 0.006512495674771, 0.000588352735397, -0.001734366267298, -0.000038795655736, 0.000171721950699};
            hp_r = new double[]{0, 0.000171721950699, 0.000038795655736, -0.001734366267298, -0.000588352735397, 0.006512495674771, 0.009857934828789, -0.024080841595863, -0.037037415978858, 0.069976799610733, 0.022832651022559, 0.097198394458907, -0.572022978010068, 0.73034354908838, -0.237689909049258, -0.204654794495781, 0.144602343705308, 0.035266759564465, -0.043000190681551, -0.002003471900109, 0.006389603666454, 0.000110535097643, -0.000489263610262};

        } else if (wname.equals("sym15")) {
            lp_d = new double[]{0, 0.000009712419738, -0.000007359666799, -0.000160661866375, 0.000055122547856, 0.001070567219463, -0.000267316446472, -0.003590165447373, 0.003423450736352, 0.010079977087905, -0.019405011430943, -0.038876716876848, 0.021937642719737, 0.040735479696776, -0.041082666635438, 0.1115336951426, 0.578640415215098, 0.721843029636261, 0.243962705432181, -0.196626358766261, -0.134056298456253, 0.068393310060499, 0.067969829044883, -0.008744788886485, -0.017171252781642, 0.001526138278183, 0.003481028737065, -0.000108154401686, -0.000402168537603, 0.000021717890151, 0.000028660708525};
            hp_d = new double[]{0, -0.000028660708525, 0.000021717890151, 0.000402168537603, -0.000108154401686, -0.003481028737065, 0.001526138278183, 0.017171252781642, -0.008744788886485, -0.067969829044883, 0.068393310060499, 0.134056298456253, -0.196626358766261, -0.243962705432181, 0.721843029636261, -0.578640415215098, 0.1115336951426, 0.041082666635438, 0.040735479696776, -0.021937642719737, -0.038876716876848, 0.019405011430943, 0.010079977087905, -0.003423450736352, -0.003590165447373, 0.000267316446472, 0.001070567219463, -0.000055122547856, -0.000160661866375, 0.000007359666799, 0.000009712419738};
            lp_r = new double[]{0, 0.000028660708525, 0.000021717890151, -0.000402168537603, -0.000108154401686, 0.003481028737065, 0.001526138278183, -0.017171252781642, -0.008744788886485, 0.067969829044883, 0.068393310060499, -0.134056298456253, -0.196626358766261, 0.243962705432181, 0.721843029636261, 0.578640415215098, 0.1115336951426, -0.041082666635438, 0.040735479696776, 0.021937642719737, -0.038876716876848, -0.019405011430943, 0.010079977087905, 0.003423450736352, -0.003590165447373, -0.000267316446472, 0.001070567219463, 0.000055122547856, -0.000160661866375, -0.000007359666799, 0.000009712419738};
            hp_r = new double[]{0, 0.000009712419738, 0.000007359666799, -0.000160661866375, -0.000055122547856, 0.001070567219463, 0.000267316446472, -0.003590165447373, -0.003423450736352, 0.010079977087905, 0.019405011430943, -0.038876716876848, -0.021937642719737, 0.040735479696776, 0.041082666635438, 0.1115336951426, -0.578640415215098, 0.721843029636261, -0.243962705432181, -0.196626358766261, 0.134056298456253, 0.068393310060499, -0.067969829044883, -0.008744788886485, 0.017171252781642, 0.001526138278183, -0.003481028737065, -0.000108154401686, 0.000402168537603, 0.000021717890151, -0.000028660708525};
        }
    }

    private static void My_Mextend(double[] sign_in, Integer Val_of_extend, double[] mextend_out) {
        int length_in = sign_in.length;
        if (Val_of_extend == 0)         //如果延拓值为零，直接返回
        {
            mextend_out = new double[length_in];
            for (int i = 1; i < length_in; i++) {
                mextend_out[i] = sign_in[i];
            }
            return;
        }
        if (length_in % 2 == 0) {
            mextend_out = new double[length_in + 2 * Val_of_extend];
            for (int i = 1; i < Val_of_extend; i++) {
                mextend_out[i] = sign_in[Val_of_extend - i + 1];
            }
            CopyArr(mextend_out, sign_in, Long.valueOf(length_in) * 8, Long.valueOf(Val_of_extend) + 1, 1L);
            for (int i = length_in + Val_of_extend + 1; i < length_in + 2 * Val_of_extend; i++) {

                mextend_out[i] = sign_in[length_in + 2 * Val_of_extend - (i - length_in + Val_of_extend - 1)];
            }
        } else {
            mextend_out = new double[length_in + 2 * Val_of_extend + 1];
            for (int i = 1; i < Val_of_extend; i++) {
                mextend_out[i] = sign_in[Val_of_extend - i + 1];
            }
            CopyArr(mextend_out, sign_in, Long.valueOf(length_in) * 8, Long.valueOf(Val_of_extend) + 1, 1L);
            for (int i = length_in + Val_of_extend + 1; i < length_in + 2 * Val_of_extend + 1; i++)
                mextend_out[i] = sign_in[length_in + 2 * Val_of_extend - (i - length_in + Val_of_extend - 1)];

        }


    }

    //    private void CopyArr(double[] B, double[] a, Long n, Long mark1=1, Long mark2 =1) {
    public static void CopyArr(double[] src, double[] dest, Long length, Long srcPos, Long destPos) {
        System.arraycopy(src, srcPos.intValue(), dest, destPos.intValue(), length.intValue());
    }

    public static void CopyArrDbl2(double[] src, double[] dest, Long srcPos, Long length) {
        System.arraycopy(src, srcPos.intValue(), dest, 1, length.intValue());
    }


    /**
     * '*模块********************************************************
     * 'My_Conv 数组下标以1开始
     * 'Tab_a() 数据向量         Tab_b() 高低通滤波器向量
     * 'Conv_out()  为卷积后向量
     * <p>
     * '******自己按卷积概念编制比较快*******
     **/
    private static void My_Conv(double[] Tab_a, double[] Tab_b, double[] conv_out) {
        Long flag = 0L;
        int length_a = Tab_a.length;
        int length_b = Tab_b.length;
        int all_length = length_a + length_b - 1;
        conv_out = new double[all_length];
        for (int J = 1; J < length_b; J++) {
            for (int kk = 1; kk < length_b; kk++) {
                conv_out[J + kk - 1] = conv_out[J + kk - 1] + Tab_a[kk] * Tab_b[J];
            }
        }
    }

    /**
     * '*模块********************************************************
     * 'My_Downspl 数组下标以1开始
     * '函数 Y=DOWMSPL(X) 对输入序列进行下抽样，输出序列 Y。
     * <p>
     * '下抽样是对输入序列取其偶数位，舍弃奇数位。例如 x=[x1,x2,x3,x4,x5]，则 y=[x2,x4].;如果序列长度为奇数则舍弃末位。
     * <p>
     * '***************************************************************
     **/
    private static void My_Downspl(double[] sign_in, double[] Downspl_out) {
        int length_in = sign_in.length;
        if (length_in % 2 == 1) {
            Downspl_out = new double[(length_in - 1) / 2];
            for (int i = 1; i < (int) ((length_in - 1) / 2); i++)
                Downspl_out[i] = sign_in[i * 2];
        } else {
            Downspl_out = new double[((length_in) / 2)];
            for (int i = 1; i < (int) ((length_in) / 2); i++)
                Downspl_out[i] = sign_in[i * 2];
        }
    }

    /**
     * '*模块********************************************************
     * 'My_Mtrim 数组下标以1开始
     * '函数DMy_Mtrim 用于对小波分解系数序列进行前后裁剪，输出序列 Mtrim_out()。
     * <p>
     * '前后裁剪。例如:如裁剪2， x=[x1,x2,x3,x4,x5,x6,x7,x8]，则 y=[x3,x4,x5,x5,x6].
     * <p>
     * '***************************************************************
     **/
    private static void My_Mtrim(double[] sign_in, Integer Val_of_Mtrim, double[] Mtrim_out) {
        int length_in = sign_in.length;
        if (length_in % 2 == 1) {
            Mtrim_out = new double[length_in - 2 * Val_of_Mtrim];
            CopyArr(Mtrim_out, sign_in, (Long.valueOf(length_in) - 2 * Long.valueOf(Val_of_Mtrim)) * 8, 1L, Long.valueOf(Val_of_Mtrim) + 1);
        } else {
            Mtrim_out = new double[length_in - 2 * Val_of_Mtrim];
            CopyArr(Mtrim_out, sign_in, (Long.valueOf(length_in) - 2 * Long.valueOf(Val_of_Mtrim)) * 8, 1L, Long.valueOf(Val_of_Mtrim) + 1);
        }
    }

    private static Long length_dnl, length_dnh;

    /**
     * 函数 My_Del_Nois2(c() As double,l() As double, wname As String, DIME As Integer, ca() As double) 对输入序列dnl() As double, dnh() As double进行一维重构序列c
     * ' 输入参数：c()——小波分解系数序列；
     * '          l()——各层分解系数长度；
     * '          wname——小波名称；
     * '          DIME——小波分解层数。
     * ' 输出参数：ca——去噪后输出的重构序列；
     **/
    public static void My_Del_Nois2(double[] sign_in, long[] L, String wname, Integer DIME, double[] ca) {
        double[] cvl, cvh, cva, dnl, dnh;
        double[] lp_d = new double[]{}, hp_d = new double[]{}, lp_r = new double[]{}, hp_r = new double[]{};
        double[] lp_d_dbl, hp_d_dbl, lp_r_dbl, hp_r_dbl;
        double[] conv_out, sign_out, C;
        double[] Upspl_out;
        double[] Mtrim_out;
        double[] DeNois_out;
        double[] var;
        double[] Mean;
        double[] median;
        double[] std;
        double[] threshold;
        Long length_sign;
        Long length_recon;
        Long length_sign_in;

        int M = sign_in.length;
        C = new double[M];
        Util.CopyArrDbl2(C, sign_in, 1L, Long.valueOf(M * 8));

        Util.My_Getfilters(wname, lp_d, hp_d, lp_r, hp_r);                           //   '提取四种滤波器
        int length_filter = lp_r.length;
        lp_d_dbl = new double[length_filter];
        hp_d_dbl = new double[length_filter];
        lp_r_dbl = new double[length_filter];
        hp_r_dbl = new double[length_filter];
        for (int i = 1; i < lp_d.length; i++) {
            lp_d_dbl[i] = lp_d[i];                    // '将四种滤波器变成double型
            hp_d_dbl[i] = hp_d[i];
            lp_r_dbl[i] = lp_r[i];
            hp_r_dbl[i] = hp_r[i];
        }

        for (int kkk = 1; kkk < DIME; kkk++) {
            length_sign_in = Long.valueOf(C.length);
            if (kkk == 1) {
                length_dnl = L[2 * ((DIME - kkk) + 1)];
                length_dnh = L[2 * ((DIME - kkk) + 1) + 1];
                dnl = new double[length_dnl.intValue()];
                dnh = new double[length_dnh.intValue()];

                Util.CopyArr(dnl, C, length_dnl * 8, 1L, (length_sign_in - length_dnl - length_dnh) + 1);


                Util.CopyArr(dnh, C, length_dnh * 8, 1L, (length_sign_in - length_dnh) + 1);
                C = new double[(int) (length_sign_in - length_dnl - length_dnh)];      //'提取系数后，将输入系数数组截尾
                length_sign_in = Long.valueOf(C.length);
            } else {
                length_dnl = L[2 * ((DIME - kkk) + 1)];
                length_dnh = L[2 * ((DIME - kkk) + 1) + 1];
                dnh = new double[length_dnh.intValue()];


                Util.CopyArr(dnh, C, length_dnh * 8, 1L, (length_sign_in - length_dnh) + 1);
                C = new double[(int) (length_sign_in - length_dnl - length_dnh)];              //'提取系数后，将输入系数数组截尾
            }
        }

    }

    public static double[] preserve(double[] src, int length) {
        double[] dest = new double[length];
        for (int i = 0; i < src.length; i++) {
            dest[i] = src[i];//把旧数组中的元素拷贝到新数组中
        }
        return dest;
    }

}






